from telegram import (
    LabeledPrice,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    PreCheckoutQueryHandler,
    ContextTypes,
)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –æ—Ç BotFather
BOT_TOKEN = "–í–ê–®_TELEGRAM_BOT_TOKEN"

# –°—É–º–º—ã –ø–∞–∫–µ—Ç–æ–≤ –≤ —Ä—É–±–ª—è—Ö (—Ü–µ–Ω—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ —Å–∞–º–æ–π –º–µ–ª–∫–æ–π –µ–¥–∏–Ω–∏—Ü–µ: –∫–æ–ø–µ–π–∫–∞—Ö)
PRICE_LIST = {
    "stars_10": [LabeledPrice("10 Stars", 100 * 100)],   # 100 ‚ÇΩ
    "stars_25": [LabeledPrice("25 Stars", 225 * 100)],   # 225 ‚ÇΩ (—Å–∫–∏–¥–∫–∞)
    "stars_50": [LabeledPrice("50 Stars", 400 * 100)],   # 400 ‚ÇΩ
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞ Stars."""
    keyboard = [
        [
            InlineKeyboardButton("10 ‚≠ê –∑–∞¬†100‚ÄØ‚ÇΩ", callback_data="stars_10"),
            InlineKeyboardButton("25 ‚≠ê –∑–∞¬†225‚ÄØ‚ÇΩ", callback_data="stars_25"),
        ],
        [InlineKeyboardButton("50 ‚≠ê –∑–∞¬†400‚ÄØ‚ÇΩ", callback_data="stars_50")],
    ]
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç Stars –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def buy_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á—ë—Ç (Invoice) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    query = update.callback_query
    await query.answer()
    choice = query.data  # e.g. 'stars_10'
    prices = PRICE_LIST[choice]

    await context.bot.send_invoice(
        chat_id=update.effective_chat.id,
        title=f"–ü–∞–∫–µ—Ç {prices[0].label}",
        description=f"–ü–æ–∫—É–ø–∫–∞ {prices[0].label} –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –≤–∞—à–µ–º —á–∞—Ç–µ.",
        payload=choice,            # —Å–ª—É–∂–µ–±–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
        provider_token="–í–ê–®_PROVIDER_TOKEN",  # –∏–∑ BotFather
        currency="RUB",
        prices=prices,
        start_parameter=choice
    )

async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ Pre-Checkout (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–ø–ª–∞—Ç—É)."""
    query = update.pre_checkout_query
    # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º OK, –∏–Ω–∞—á–µ –ø–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–∏—Ç—Å—è
    await query.answer(ok=True)

async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã ‚Äî –Ω–∞—á–∏—Å–ª—è–µ–º Stars –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º."""
    payment = update.message.successful_payment
    user_id = update.effective_user.id
    payload = payment.invoice_payload  # 'stars_10' –∏ —Ç.–¥.

    # –ó–¥–µ—Å—å: –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É: add_stars(user_id, payload)

    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n"
        f"–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø–∞–∫–µ—Ç: *{payment.total_amount // 100}*‚ÄØ‚ÇΩ\n"
        f"Stars –Ω–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á—ë—Ç üéâ",
        parse_mode="Markdown"
    )

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(buy_callback, pattern="^stars_"))
    app.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    app.add_handler(CommandHandler("help", start))
    app.add_handler(
        CommandHandler(
            "success", successful_payment_callback
        )  # —Ö–æ—Ç—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –Ω–µ –Ω—É–∂–µ–Ω, –µ—Å–ª–∏ –≤—ã –ª–æ–≤–∏—Ç–µ —á–µ—Ä–µ–∑ message handler:
    )
    # –õ–æ–≤–∏–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É –∫–∞–∫ MessageHandler:
    from telegram.ext import MessageHandler, filters
    app.add_handler(
        MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback)
    )

    app.run_polling()

if name == "__main__":
    main()
